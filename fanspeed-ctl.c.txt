#include <stdio.h>
#include <limits.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
double get_max_temp(const char** n);
double get_max_temp(const char** n){
        double value;
        int TEMP_IDX_MAX=11;
        FILE *f;

        double max_temp = 0;
        for(int i = 0; i < TEMP_IDX_MAX; i++){
                if((f = fopen(n[i], "r"))){
                        int temp = 0;
                        temp = fscanf(f, "%lf", &value);
                        if( max_temp < value ){
                                max_temp = value;
                        }
                        //printf("Core %d tempture = %lf\n", i, value);
                        temp = fclose(f);
                }
        }
        return max_temp;
}
void adjust_fan_speed(int State);
void adjust_fan_speed(int State){
        switch(State){
                case 1:
                        system("i2cset -y 1 0x66 0x00 0x20");
                        system("i2cset -y 1 0x66 0x01 0x20");
                        system("i2cset -y 1 0x66 0x02 0x20");
                        system("i2cset -y 1 0x66 0x03 0x20");
                        system("i2cset -y 1 0x66 0x04 0x20");
                        break;
                case 2:
                        system("i2cset -y 1 0x66 0x00 0x30");
                        system("i2cset -y 1 0x66 0x01 0x30");
                        system("i2cset -y 1 0x66 0x02 0x30");
                        system("i2cset -y 1 0x66 0x03 0x30");
                        system("i2cset -y 1 0x66 0x04 0x30");
                        break;
                case 3:
                        system("i2cset -y 1 0x66 0x00 0x45");
                        system("i2cset -y 1 0x66 0x01 0x45");
                        system("i2cset -y 1 0x66 0x02 0x45");
                        system("i2cset -y 1 0x66 0x03 0x45");
                        system("i2cset -y 1 0x66 0x04 0x45");
                        break;
                case 4:
                        system("i2cset -y 1 0x66 0x00 0x60");
                        system("i2cset -y 1 0x66 0x01 0x60");
                        system("i2cset -y 1 0x66 0x02 0x60");
                        system("i2cset -y 1 0x66 0x03 0x60");
                        system("i2cset -y 1 0x66 0x04 0x60");
                        break;
                case 5:
                        system("i2cset -y 1 0x66 0x00 0x80");
                        system("i2cset -y 1 0x66 0x01 0x80");
                        system("i2cset -y 1 0x66 0x02 0x80");
                        system("i2cset -y 1 0x66 0x03 0x80");
                        system("i2cset -y 1 0x66 0x04 0x80");
                        break;
                case 6:
                        system("i2cset -y 1 0x66 0x00 0xff");
                        system("i2cset -y 1 0x66 0x01 0xff");
                        system("i2cset -y 1 0x66 0x02 0xff");
                        system("i2cset -y 1 0x66 0x03 0xff");
                        system("i2cset -y 1 0x66 0x04 0xff");
                        break;



                default:
                        break;

        }
}
void main(void){
        const char* n[] = {"/sys/class/hwmon/hwmon0/temp1_input",
                           "/sys/class/hwmon/hwmon0/temp2_input",
                           "/sys/class/hwmon/hwmon0/temp3_input",
                           "/sys/class/hwmon/hwmon0/temp4_input",
                           "/sys/class/hwmon/hwmon0/temp5_input",
                           "/sys/class/hwmon/hwmon0/temp6_input",
                           "/sys/class/hwmon/hwmon0/temp7_input",
                           "/sys/class/hwmon/hwmon0/temp8_input",
                           "/sys/class/hwmon/hwmon0/temp9_input",
                           "/sys/class/hwmon/hwmon0/temp10_nput",
                           "/sys/class/hwmon/hwmon0/temp11_input"};
        int max_temp = (int)get_max_temp(n);
        max_temp = max_temp / 1000;
        //determine state
        int State = 1;
        if( 55 <= max_temp < 65) State = 2;
        else if( 65 <= max_temp < 75) State = 3;
        else if( 75 <= max_temp < 85) State = 4;
        else if( max_temp >= 85 ) State = 5;
        system("i2cset -y 1 0x70 0x4");
        int cur_temp;
        //printf("INITINAL TEMP = %d, State=%d\n",max_temp,State);
        while( 1 )
        {
                if(State == 1){
                        adjust_fan_speed(State);
                        while(State == 1){
                                //printf("State = %d\n",State);
                                sleep(6);
                                cur_temp = (int)get_max_temp(n);
                                cur_temp = cur_temp / 1000;
                                if(cur_temp >= 55) State = 2;
                                else State = 1;
                                //printf("Cur temp = %d, Cur State=%d",cur_temp,,
State);fflush(stdout);
                        }
                }
                else if(State == 2){
                        adjust_fan_speed(State);
                        while(State == 2){
                                //printf("State = %d\n",State);
                                sleep(6);
                                cur_temp = (int)get_max_temp(n);
                                cur_temp = cur_temp / 1000;
                                if(cur_temp >= 65) State = 3;
                                else if(cur_temp <= 52) State = 1;
                        }
                }
                else if(State == 3){
                        adjust_fan_speed(State);
                        while(State == 3){
                                sleep(6);
                                cur_temp = (int)get_max_temp(n);
                                cur_temp = cur_temp / 1000;
                                if(cur_temp >= 75) State = 4;
                                else if(cur_temp <= 62) State = 2;
                        }
                }
                else if(State == 4){
                        adjust_fan_speed(State);
                        while(State == 4){
                                printf("State = %d\n",State);
                                sleep(6);
                                cur_temp = (int)get_max_temp(n);
                                cur_temp = cur_temp / 1000;
                                if(cur_temp >= 85) State = 5;
                                else if(cur_temp <= 72) State = 3;
                        }
                }
                else if(State == 5){
                        adjust_fan_speed(State);
                        while(State == 5){
                                printf("State = %d\n",State);
                                sleep(2);
                                cur_temp = (int)get_max_temp(n);
                                cur_temp = cur_temp / 1000;
                                if(cur_temp >= 90) State = 6;
                                else if(cur_temp <= 82) State = 4;
                        }
                }
                else if(State == 6){
                        adjust_fan_speed(State);
                        while(State == 6){
                                //printf("State = %d\n",State);
                                sleep(1);
                                cur_temp = (int)get_max_temp(n);
                                cur_temp = cur_temp / 1000;
                                if(cur_temp >= 90) State = 6;
                                else if(cur_temp <= 87) State = 5;
                        }
                }




        }
        //printf("End:State = %d\n",State);
        //printf("Max tempture = %lf\n", temp );
        //system("i2cset -y 1 0x66 0x00 0xff");
        return;
}
